/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC721,
  MockERC721Interface,
} from "../../../contracts/mocks/MockERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "baseURI_",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_tokenURI",
        type: "string",
      },
    ],
    name: "setTokenURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020da380380620020da833981016040819052620000349162000237565b8151829082906200004d906000906020850190620000de565b50805162000063906001906020840190620000de565b505050620000806200007a6200008860201b60201c565b6200008c565b5050620002f1565b3390565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000ec906200029e565b90600052602060002090601f0160209004810192826200011057600085556200015b565b82601f106200012b57805160ff19168380011785556200015b565b828001600101855582156200015b579182015b828111156200015b5782518255916020019190600101906200013e565b50620001699291506200016d565b5090565b5b808211156200016957600081556001016200016e565b600082601f83011262000195578081fd5b81516001600160401b0380821115620001b257620001b2620002db565b604051601f8301601f19908116603f01168101908282118183101715620001dd57620001dd620002db565b81604052838152602092508683858801011115620001f9578485fd5b8491505b838210156200021c5785820183015181830184015290820190620001fd565b838211156200022d57848385830101525b9695505050505050565b600080604083850312156200024a578182fd5b82516001600160401b038082111562000261578384fd5b6200026f8683870162000184565b9350602085015191508082111562000285578283fd5b50620002948582860162000184565b9150509250929050565b600281046001821680620002b357607f821691505b60208210811415620002d557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611dd980620003016000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806370a08231116100cd578063a22cb46511610081578063c87b56dd11610066578063c87b56dd146102d0578063e985e9c5146102e3578063f2fde38b1461031f5761016c565b8063a22cb465146102aa578063b88d4fde146102bd5761016c565b80638da5cb5b116100b25780638da5cb5b1461027e57806395d89b411461028f578063a1448194146102975761016c565b806370a0823114610255578063715018a6146102765761016c565b806323b872dd1161012457806355f804b31161010957806355f804b3146102275780636352211e1461023a5780636c0360eb1461024d5761016c565b806323b872dd1461020157806342842e0e146102145761016c565b8063081812fc11610155578063081812fc146101ae578063095ea7b3146101d9578063162094c4146101ee5761016c565b806301ffc9a71461017157806306fdde0314610199575b600080fd5b61018461017f366004611abb565b610332565b60405190151581526020015b60405180910390f35b6101a16103d1565b6040516101909190611c5f565b6101c16101bc366004611b39565b610463565b6040516001600160a01b039091168152602001610190565b6101ec6101e7366004611a92565b6104fd565b005b6101ec6101fc366004611b51565b61062f565b6101ec61020f3660046119a4565b6106c9565b6101ec6102223660046119a4565b610750565b6101ec610235366004611af3565b61076b565b6101c1610248366004611b39565b610782565b6101a161080d565b610268610263366004611958565b61089b565b604051908152602001610190565b6101ec610935565b6007546001600160a01b03166101c1565b6101a161099b565b6101ec6102a5366004611a92565b6109aa565b6101ec6102b8366004611a58565b610a0e565b6101ec6102cb3660046119df565b610ae0565b6101a16102de366004611b39565b610b6e565b6101846102f1366004611972565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101ec61032d366004611958565b610b79565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061039557506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b6060600080546103e090611ce1565b80601f016020809104026020016040519081016040528092919081815260200182805461040c90611ce1565b80156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104e15760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061050882610782565b9050806001600160a01b0316836001600160a01b031614156105925760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f720000000000000000000000000000000000000000000000000000000000000060648201526084016104d8565b336001600160a01b03821614806105ae57506105ae81336102f1565b6106205760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104d8565b61062a8383610c5b565b505050565b6007546001600160a01b031633146106895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d8565b61062a8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cd692505050565b6106d33382610d7f565b6107455760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104d8565b61062a838383610e76565b61062a83838360405180602001604052806000815250610ae0565b805161077e906008906020840190611832565b5050565b6000818152600260205260408120546001600160a01b0316806103c95760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104d8565b6008805461081a90611ce1565b80601f016020809104026020016040519081016040528092919081815260200182805461084690611ce1565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b505050505081565b60006001600160a01b0382166109195760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016104d8565b506001600160a01b031660009081526003602052604090205490565b6007546001600160a01b0316331461098f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d8565b6109996000611050565b565b6060600180546103e090611ce1565b6007546001600160a01b03163314610a045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d8565b61077e82826110af565b6001600160a01b038216331415610a675760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d8565b3360008181526005602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ad4911515815260200190565b60405180910390a35050565b610aea3383610d7f565b610b5c5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104d8565b610b68848484846110c9565b50505050565b60606103c982611147565b6007546001600160a01b03163314610bd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104d8565b6001600160a01b038116610c4f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104d8565b610c5881611050565b50565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610c9d82610782565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000828152600260205260409020546001600160a01b0316610d605760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201527f6578697374656e7420746f6b656e00000000000000000000000000000000000060648201526084016104d8565b6000828152600660209081526040909120825161062a92840190611832565b6000818152600260205260408120546001600160a01b0316610df85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104d8565b6000610e0383610782565b9050806001600160a01b0316846001600160a01b03161480610e3e5750836001600160a01b0316610e3384610463565b6001600160a01b0316145b80610e6e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610e8982610782565b6001600160a01b031614610f055760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016104d8565b6001600160a01b038216610f805760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016104d8565b610f8b600082610c5b565b6001600160a01b0383166000908152600360205260408120805460019290610fb4908490611c9e565b90915550506001600160a01b0382166000908152600360205260408120805460019290610fe2908490611c72565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600780546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61077e8282604051806020016040528060008152506112c6565b6110d4848484610e76565b6110e084848484611344565b610b685760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d8565b6000818152600260205260409020546060906001600160a01b03166111d45760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e00000000000000000000000000000060648201526084016104d8565b600082815260066020526040812080546111ed90611ce1565b80601f016020809104026020016040519081016040528092919081815260200182805461121990611ce1565b80156112665780601f1061123b57610100808354040283529160200191611266565b820191906000526020600020905b81548152906001019060200180831161124957829003601f168201915b50505050509050600061127761149c565b905080516000141561128b575090506103cc565b8151156112bd5780826040516020016112a5929190611bf4565b604051602081830303815290604052925050506103cc565b610e6e846114ab565b6112d08383611594565b6112dd6000848484611344565b61062a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d8565b60006001600160a01b0384163b1561149157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611388903390899088908890600401611c23565b602060405180830381600087803b1580156113a257600080fd5b505af19250505080156113d2575060408051601f3d908101601f191682019092526113cf91810190611ad7565b60015b611477573d808015611400576040519150601f19603f3d011682016040523d82523d6000602084013e611405565b606091505b50805161146f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104d8565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e6e565b506001949350505050565b6060600880546103e090611ce1565b6000818152600260205260409020546060906001600160a01b03166115385760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016104d8565b600061154261149c565b90506000815111611562576040518060200160405280600081525061158d565b8061156c846116e3565b60405160200161157d929190611bf4565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166115ea5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d8565b6000818152600260205260409020546001600160a01b03161561164f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d8565b6001600160a01b0382166000908152600360205260408120805460019290611678908490611c72565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b606081611724575060408051808201909152600181527f300000000000000000000000000000000000000000000000000000000000000060208201526103cc565b8160005b811561174e578061173881611d1c565b91506117479050600a83611c8a565b9150611728565b60008167ffffffffffffffff81111561177757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117a1576020820181803683370190505b5090505b8415610e6e576117b6600183611c9e565b91506117c3600a86611d37565b6117ce906030611c72565b60f81b8183815181106117f157634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061182b600a86611c8a565b94506117a5565b82805461183e90611ce1565b90600052602060002090601f01602090048101928261186057600085556118a6565b82601f1061187957805160ff19168380011785556118a6565b828001600101855582156118a6579182015b828111156118a657825182559160200191906001019061188b565b506118b29291506118b6565b5090565b5b808211156118b257600081556001016118b7565b600067ffffffffffffffff808411156118e6576118e6611d77565b604051601f8501601f19908116603f0116810190828211818310171561190e5761190e611d77565b8160405280935085815286868601111561192757600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b03811681146103cc57600080fd5b600060208284031215611969578081fd5b61158d82611941565b60008060408385031215611984578081fd5b61198d83611941565b915061199b60208401611941565b90509250929050565b6000806000606084860312156119b8578081fd5b6119c184611941565b92506119cf60208501611941565b9150604084013590509250925092565b600080600080608085870312156119f4578081fd5b6119fd85611941565b9350611a0b60208601611941565b925060408501359150606085013567ffffffffffffffff811115611a2d578182fd5b8501601f81018713611a3d578182fd5b611a4c878235602084016118cb565b91505092959194509250565b60008060408385031215611a6a578182fd5b611a7383611941565b915060208301358015158114611a87578182fd5b809150509250929050565b60008060408385031215611aa4578182fd5b611aad83611941565b946020939093013593505050565b600060208284031215611acc578081fd5b813561158d81611d8d565b600060208284031215611ae8578081fd5b815161158d81611d8d565b600060208284031215611b04578081fd5b813567ffffffffffffffff811115611b1a578182fd5b8201601f81018413611b2a578182fd5b610e6e848235602084016118cb565b600060208284031215611b4a578081fd5b5035919050565b600080600060408486031215611b65578283fd5b83359250602084013567ffffffffffffffff80821115611b83578384fd5b818601915086601f830112611b96578384fd5b813581811115611ba4578485fd5b876020828501011115611bb5578485fd5b6020830194508093505050509250925092565b60008151808452611be0816020860160208601611cb5565b601f01601f19169290920160200192915050565b60008351611c06818460208801611cb5565b835190830190611c1a818360208801611cb5565b01949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152611c556080830184611bc8565b9695505050505050565b60006020825261158d6020830184611bc8565b60008219821115611c8557611c85611d4b565b500190565b600082611c9957611c99611d61565b500490565b600082821015611cb057611cb0611d4b565b500390565b60005b83811015611cd0578181015183820152602001611cb8565b83811115610b685750506000910152565b600281046001821680611cf557607f821691505b60208210811415611d1657634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611d3057611d30611d4b565b5060010190565b600082611d4657611d46611d61565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610c5857600080fdfea26469706673582212200c721c3218083926ca345370205f9099c91b0e06e00aeaee0f73da294c81545864736f6c63430008020033";

type MockERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC721__factory extends ContractFactory {
  constructor(...args: MockERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC721> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockERC721>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  override attach(address: string): MockERC721 {
    return super.attach(address) as MockERC721;
  }
  override connect(signer: Signer): MockERC721__factory {
    return super.connect(signer) as MockERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721Interface {
    return new utils.Interface(_abi) as MockERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721 {
    return new Contract(address, _abi, signerOrProvider) as MockERC721;
  }
}
