/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC1155,
  MockERC1155Interface,
} from "../../../contracts/mocks/MockERC1155";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newuri",
        type: "string",
      },
    ],
    name: "setURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020d1380380620020d1833981016040819052620000349162000164565b80620000408162000053565b506200004c336200006c565b506200028d565b805162000068906002906020840190620000be565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620000cc906200023a565b90600052602060002090601f016020900481019282620000f057600085556200013b565b82601f106200010b57805160ff19168380011785556200013b565b828001600101855582156200013b579182015b828111156200013b5782518255916020019190600101906200011e565b50620001499291506200014d565b5090565b5b808211156200014957600081556001016200014e565b6000602080838503121562000177578182fd5b82516001600160401b03808211156200018e578384fd5b818501915085601f830112620001a2578384fd5b815181811115620001b757620001b762000277565b604051601f8201601f19908116603f01168101908382118183101715620001e257620001e262000277565b816040528281528886848701011115620001fa578687fd5b8693505b828410156200021d5784840186015181850187015292850192620001fe565b828411156200022e57868684830101525b98975050505050505050565b6002810460018216806200024f57607f821691505b602082108114156200027157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611e34806200029d6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c8063715018a61161008c578063a22cb46511610066578063a22cb465146101ed578063e985e9c514610200578063f242432a1461023c578063f2fde38b1461024f576100e9565b8063715018a6146101b2578063731133e9146101ba5780638da5cb5b146101cd576100e9565b80630e89341c116100c85780630e89341c1461014c5780631f7fdffa1461016c5780632eb2c2d61461017f5780634e1273f414610192576100e9565b8062fdd58e146100ee57806301ffc9a71461011457806302fe530514610137575b600080fd5b6101016100fc3660046118f7565b610262565b6040519081526020015b60405180910390f35b610127610122366004611a3c565b61030b565b604051901515815260200161010b565b61014a610145366004611a74565b6103aa565b005b61015f61015a366004611ac2565b610415565b60405161010b9190611c41565b61014a61017a366004611828565b6104a9565b61014a61018d36600461171f565b61051a565b6101a56101a0366004611973565b6105bc565b60405161010b9190611c00565b61014a610732565b61014a6101c8366004611920565b61079d565b6101d5610808565b6040516001600160a01b03909116815260200161010b565b61014a6101fb3660046118bd565b610818565b61012761020e3660046116ed565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61014a61024a3660046117c5565b610910565b61014a61025d3660046116d3565b6109ab565b60006001600160a01b0383166102e55760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061036e57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806103a257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b336103b3610808565b6001600160a01b0316146104095760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61041281610a8f565b50565b60606002805461042490611c90565b80601f016020809104026020016040519081016040528092919081815260200182805461045090611c90565b801561049d5780601f106104725761010080835404028352916020019161049d565b820191906000526020600020905b81548152906001019060200180831161048057829003601f168201915b50505050509050919050565b336104b2610808565b6001600160a01b0316146105085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61051484848484610aa6565b50505050565b6001600160a01b0385163314806105365750610536853361020e565b6105a85760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016102dc565b6105b58585858585610c88565b5050505050565b606081518351146106355760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016102dc565b6000835167ffffffffffffffff81111561065f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610688578160200160208202803683370190505b50905060005b845181101561072a576106ef8582815181106106ba57634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106106e257634e487b7160e01b600052603260045260246000fd5b6020026020010151610262565b82828151811061070f57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261072381611cf8565b905061068e565b509392505050565b3361073b610808565b6001600160a01b0316146107915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61079b6000610f02565b565b336107a6610808565b6001600160a01b0316146107fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b61051484848484610f6c565b6003546001600160a01b03165b90565b336001600160a01b03831614156108975760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016102dc565b3360008181526001602090815260408083206001600160a01b0387168085529252909120805460ff1916841515179055906001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610904911515815260200190565b60405180910390a35050565b6001600160a01b03851633148061092c575061092c853361020e565b61099e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016102dc565b6105b58585858585611076565b336109b4610808565b6001600160a01b031614610a0a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dc565b6001600160a01b038116610a865760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102dc565b61041281610f02565b8051610aa290600290602084019061152d565b5050565b6001600160a01b038416610b065760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102dc565b8151835114610b685760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102dc565b3360005b8451811015610c2057838181518110610b9557634e487b7160e01b600052603260045260246000fd5b6020026020010151600080878481518110610bc057634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610c089190611c78565b90915550819050610c1881611cf8565b915050610b6c565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610c71929190611c13565b60405180910390a46105b581600087878787611214565b8151835114610cea5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102dc565b6001600160a01b038416610d4e5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016102dc565b3360005b8451811015610e94576000858281518110610d7d57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610da957634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610e3c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016102dc565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610e79908490611c78565b9250508190555050505080610e8d90611cf8565b9050610d52565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610ee4929190611c13565b60405180910390a4610efa818787878787611214565b505050505050565b600380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416610fcc5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102dc565b33610fe681600087610fdd886113c9565b6105b5886113c9565b6000848152602081815260408083206001600160a01b038916845290915281208054859290611016908490611c78565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46105b581600087878787611422565b6001600160a01b0384166110da5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016102dc565b336110ea818787610fdd886113c9565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561116e5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016102dc565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906111ab908490611c78565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461120b828888888888611422565b50505050505050565b6001600160a01b0384163b15610efa5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906112589089908990889088908890600401611b5f565b602060405180830381600087803b15801561127257600080fd5b505af19250505080156112a2575060408051601f3d908101601f1916820190925261129f91810190611a58565b60015b611358576112ae611d3f565b806308c379a014156112e857506112c3611d56565b806112ce57506112ea565b8060405162461bcd60e51b81526004016102dc9190611c41565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016102dc565b6001600160e01b0319811663bc197c8160e01b1461120b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102dc565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061141157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15610efa5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906114669089908990889088908890600401611bbd565b602060405180830381600087803b15801561148057600080fd5b505af19250505080156114b0575060408051601f3d908101601f191682019092526114ad91810190611a58565b60015b6114bc576112ae611d3f565b6001600160e01b0319811663f23a6e6160e01b1461120b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102dc565b82805461153990611c90565b90600052602060002090601f01602090048101928261155b57600085556115a1565b82601f1061157457805160ff19168380011785556115a1565b828001600101855582156115a1579182015b828111156115a1578251825591602001919060010190611586565b506115ad9291506115b1565b5090565b5b808211156115ad57600081556001016115b2565b600067ffffffffffffffff8311156115e0576115e0611d29565b6040516115f7601f8501601f191660200182611ccb565b80915083815284848401111561160c57600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146103a557600080fd5b600082601f83011261164b578081fd5b8135602061165882611c54565b6040516116658282611ccb565b838152828101915085830183850287018401881015611682578586fd5b855b858110156116a057813584529284019290840190600101611684565b5090979650505050505050565b600082601f8301126116bd578081fd5b6116cc838335602085016115c6565b9392505050565b6000602082840312156116e4578081fd5b6116cc82611624565b600080604083850312156116ff578081fd5b61170883611624565b915061171660208401611624565b90509250929050565b600080600080600060a08688031215611736578081fd5b61173f86611624565b945061174d60208701611624565b9350604086013567ffffffffffffffff80821115611769578283fd5b61177589838a0161163b565b9450606088013591508082111561178a578283fd5b61179689838a0161163b565b935060808801359150808211156117ab578283fd5b506117b8888289016116ad565b9150509295509295909350565b600080600080600060a086880312156117dc578081fd5b6117e586611624565b94506117f360208701611624565b93506040860135925060608601359150608086013567ffffffffffffffff81111561181c578182fd5b6117b8888289016116ad565b6000806000806080858703121561183d578384fd5b61184685611624565b9350602085013567ffffffffffffffff80821115611862578485fd5b61186e8883890161163b565b94506040870135915080821115611883578384fd5b61188f8883890161163b565b935060608701359150808211156118a4578283fd5b506118b1878288016116ad565b91505092959194509250565b600080604083850312156118cf578182fd5b6118d883611624565b9150602083013580151581146118ec578182fd5b809150509250929050565b60008060408385031215611909578182fd5b61191283611624565b946020939093013593505050565b60008060008060808587031215611935578182fd5b61193e85611624565b93506020850135925060408501359150606085013567ffffffffffffffff811115611967578182fd5b6118b1878288016116ad565b60008060408385031215611985578182fd5b823567ffffffffffffffff8082111561199c578384fd5b818501915085601f8301126119af578384fd5b813560206119bc82611c54565b6040516119c98282611ccb565b8381528281019150858301838502870184018b10156119e6578889fd5b8896505b84871015611a0f576119fb81611624565b8352600196909601959183019183016119ea565b5096505086013592505080821115611a25578283fd5b50611a328582860161163b565b9150509250929050565b600060208284031215611a4d578081fd5b81356116cc81611de8565b600060208284031215611a69578081fd5b81516116cc81611de8565b600060208284031215611a85578081fd5b813567ffffffffffffffff811115611a9b578182fd5b8201601f81018413611aab578182fd5b611aba848235602084016115c6565b949350505050565b600060208284031215611ad3578081fd5b5035919050565b6000815180845260208085019450808401835b83811015611b0957815187529582019590820190600101611aed565b509495945050505050565b60008151808452815b81811015611b3957602081850181015186830182015201611b1d565b81811115611b4a5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152611b8b60a0830186611ada565b8281036060840152611b9d8186611ada565b90508281036080840152611bb18185611b14565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152611bf560a0830184611b14565b979650505050505050565b6000602082526116cc6020830184611ada565b600060408252611c266040830185611ada565b8281036020840152611c388185611ada565b95945050505050565b6000602082526116cc6020830184611b14565b600067ffffffffffffffff821115611c6e57611c6e611d29565b5060209081020190565b60008219821115611c8b57611c8b611d13565b500190565b600281046001821680611ca457607f821691505b60208210811415611cc557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715611cf157611cf1611d29565b6040525050565b6000600019821415611d0c57611d0c611d13565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561081557600481823e5160e01c90565b600060443d1015611d6657610815565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715611d98575050505050610815565b8285019150815181811115611db257505050505050610815565b843d8701016020828501011115611dce57505050505050610815565b611ddd60208286010187611ccb565b509094505050505090565b6001600160e01b03198116811461041257600080fdfea264697066735822122080b69b4342eb53538fd7692c5429782c98403676c3c8fa26ca1b2f4aea32427664736f6c63430008020033";

type MockERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC1155__factory extends ContractFactory {
  constructor(...args: MockERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC1155> {
    return super.deploy(uri, overrides || {}) as Promise<MockERC1155>;
  }
  override getDeployTransaction(
    uri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(uri, overrides || {});
  }
  override attach(address: string): MockERC1155 {
    return super.attach(address) as MockERC1155;
  }
  override connect(signer: Signer): MockERC1155__factory {
    return super.connect(signer) as MockERC1155__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC1155Interface {
    return new utils.Interface(_abi) as MockERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC1155 {
    return new Contract(address, _abi, signerOrProvider) as MockERC1155;
  }
}
